Describe Revital
  Before all
    let Vital = vital#revital#of()
    let File = Vital.import('System.File')
    let Filepath = Vital.import('System.Filepath')
    let ScriptLocal = Vital.import('Vim.ScriptLocal')
    execute powerassert#import().define('PowerAssert')

    let vitalize_modules  = ['Data.List', 'Data.String', 'Web.JSON', 'Cyclic1']
    verbose echo '========'
    verbose echo &rtp
    execute ':runtime!' g:testplugin_root g:cyclic_module_root
    verbose echo &rtp
    execute ':Vitalize' g:testplugin_root join(vitalize_modules, ' ')
    execute ':Revitalize' g:testplugin_root
  End

  After all
    call File.rmdir(Filepath.join(g:testplugin_root, printf('autoload/vital/_%s/', g:testplugin_name)), 'r')
    let delete_files = [
    \   Filepath.join(g:testplugin_root, 'autoload/vital.vim'),
    \   Filepath.join(g:testplugin_root, printf('autoload/vital/_%s.vim', g:testplugin_name)),
    \   Filepath.join(g:testplugin_root, printf('autoload/vital/%s.vim', g:testplugin_name)),
    \   Filepath.join(g:testplugin_root, printf('autoload/vital/%s.vital', g:testplugin_name))
    \ ]
    for f in delete_files
      call delete(f)
    endfor
  End

  Describe :Revitalize
    It succeeded in Before all
        let vital_data = Filepath.join(
        \   g:testplugin_root, 'autoload', 'vital', g:testplugin_name . '.vital')
        PowerAssert filereadable(vital_data)
    End

    Describe .new()
      It fails with invalid path
        let revitalizer = ScriptLocal.sfuncs('autoload/revitalizer.vim')
        Throws /Revitalizer: .* not found. Please :Vitalize before :Revitalize/ :call revitalizer.new('invalid-path')
      End
    End
  End

  Describe vital#{plugin-name}#of()
    It creates a vital object
      let V = vital#{g:testplugin_name}#of()
      PowerAssert type(V) is# type({})
      PowerAssert has_key(V, 'import')
    End
  End

  Describe revital-Vital-object
    Before all
      let V = vital#{g:testplugin_name}#of()
    End

    Describe .import
      It imports a basic vital module
        let List = V.import('Data.List')
        PowerAssert List.uniq([1, 1, 2, 3, 1]) == [1, 2, 3]
      End

      It supports s:_vital_loaded(V)
        let JSON = V.import('Web.JSON')
        PowerAssert JSON.decode('[1, "ni"]') == [1, "ni"]
      End

      It supports s:_vital_created(V)
        let JSON = V.import('Web.JSON')
        PowerAssert has_key(JSON, 'true')
      End

      It supports self module
        let Selfmodule = V.import('Selfmodule')
        PowerAssert Selfmodule.return1()
      End

      It supports cyclic dependencies
        PowerAssert V.import('Cyclic1').return1()
      End
    End

    Describe .load
      It imports a basic vital module
        let V = vital#{g:testplugin_name}#of()
        call V.load('Data.List')
        PowerAssert V.Data.List.uniq([1, 1, 2, 3, 1]) == [1, 2, 3]
      End

      It supports s:_vital_loaded(V)
        let V = vital#{g:testplugin_name}#of()
        call V.load('Web.JSON')
        PowerAssert V.Web.JSON.decode('[1, "ni"]') == [1, "ni"]
      End

      It supports s:_vital_created(V)
        let V = vital#{g:testplugin_name}#of()
        call V.load('Web.JSON')
        PowerAssert has_key(V.Web.JSON, 'true')
      End

      It supports self module
        let V = vital#{g:testplugin_name}#of()
        call V.load('Selfmodule')
        PowerAssert V.Selfmodule.return1()
      End

      It supports cyclic dependencies
        let V = vital#{g:testplugin_name}#of()
        call V.load('Cyclic1')
        PowerAssert V.Cyclic1.return1()
      End
    End

    Describe .exists()
      It returns 1 for existing module
        let V = vital#{g:testplugin_name}#of()
        PowerAssert V.exists('Data.List')
      End

      It returns 0 for non-existing module
        let V = vital#{g:testplugin_name}#of()
        PowerAssert V.exists('not-exists') is# 0
      End
    End

    Describe .search()
      Before all
        let V = vital#{g:testplugin_name}#of()
      End

      It searches existing module
        PowerAssert V.search('Data.List') == ['Data.List']
      End

      It returns empty list for non-existing module
        PowerAssert V.search('not-exists*') == []
      End

      It supports *
        PowerAssert len(V.search('Cyclic*')) == 2, 'Cyclic1 and Cyclic2 exists'
        PowerAssert len(V.search('Data.*List')) >= 1, 'Data.List exists at least'
      End

      It supports **
        PowerAssert len(V.search('**')) >= len(vitalize_modules), 'Vitalized modules exists at least'
      End
    End

  End
End
